const TelegramBot = require('node-telegram-bot-api');
const token = '6525308122:AAFKbYAxhSoHhl4ikWAfYYIInrQHQkrRs6w';
const bot = new TelegramBot(token, { polling: true });
const rooms = {};
const userRooms = {};
const lastStickerTime = {};

bot.onText(/\/leave/, (msg) => {
    const chatId = msg.chat.id;
    const roomId = userRooms[chatId];
    if (rooms[roomId]) {
        const roomName = `–ö–æ–º–Ω–∞—Ç–∞ —Å ID: ${roomId}`;
        const userIndex = rooms[roomId].findIndex((participant) => participant.id === chatId);
        if (userIndex !== -1) {
            rooms[roomId].splice(userIndex, 1);
            delete userRooms[chatId];
            bot.sendMessage(chatId, `–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É. üëã`, {
                reply_markup: { keyboard: [[{ text: '/create' }], [{ text: '/join' }]], resize_keyboard: true },
            });
            rooms[roomId].forEach((participant) => {
                bot.sendMessage(participant.id, `@${msg.from.username} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É. üòî`);
            });
        } else {
            bot.sendMessage(chatId, '–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–Ω–∞—Ç–µ. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /join.', {
                reply_markup: { keyboard: [[{ text: '/create' }], [{ text: '/join' }]], resize_keyboard: true },
            });
        }
    }
});

bot.onText(/\/create/, (msg) => {
    const chatId = msg.chat.id;
    if (userRooms[chatId]) {
        bot.sendMessage(chatId, '–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –¥—Ä—É–≥—É—é. üòä', {
            reply_markup: { keyboard: [[{ text: '/delete' }], [{ text: '/members' }]], resize_keyboard: true },
        });
    } else {
        const roomId = Math.random().toString().substr(2, 4);
        rooms[roomId] = [{ id: chatId, name: msg.from.username }];
        userRooms[chatId] = roomId;
        bot.sendDocument(chatId, 'https://media.giphy.com/media/26FPJGjhefSJuaRhu/giphy.gif', {
            caption: `–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–Ω–∞—Ç—É —Å ID: ${roomId} üåü`,
            reply_markup: { keyboard: [[{ text: '/delete' }], [{ text: '/members' }]], resize_keyboard: true },
        });
    }
});

bot.onText(/\/join (\d{4})/, (msg, match) => {
    const chatId = msg.chat.id;
    const roomId = match[1];
    if (rooms[roomId]) {
        if (userRooms[chatId]) {
            bot.sendMessage(chatId, '–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ. –ù–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–π –∫–æ–º–Ω–∞—Ç–µ. üòä', {
                reply_markup: { keyboard: [[{ text: '/members' }], [{ text: '/delete' }]], resize_keyboard: true },
            });
        } else {
            const participant = { id: chatId, name: msg.from.username };
            rooms[roomId].push(participant);
            userRooms[chatId] = roomId;
            let members = '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã:\n';
            rooms[roomId].forEach((member, index) => {
                members += `${index + 1}. @${member.name}\n`;
            });
            bot.sendDocument(chatId, 'https://media.giphy.com/media/26FPJGjhefSJuaRhu/giphy.gif', {
                caption: `–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ —Å ID: ${roomId} üéâ\n\n${members}`,
            });
            rooms[roomId].forEach((participant) => {
                if (participant.id !== chatId) {
                    bot.sendMessage(participant.id, `@${msg.from.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ. üéâ`);
                }
            });
        }
    } else {
        bot.sendMessage(chatId, '–ö–æ–º–Ω–∞—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. üòû', {
            reply_markup: { keyboard: [[{ text: '/create' }]], resize_keyboard: true },
        });
    }
});

bot.onText(/\/members/, (msg) => {
    const chatId = msg.chat.id;
    const roomId = userRooms[chatId];
    if (rooms[roomId]) {
        let members = '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã:\n';
        rooms[roomId].forEach((member, index) => {
            members += `${index + 1}. @${member.name}\n`;
        });
        bot.sendMessage(chatId, members, { reply_markup: { keyboard: [[{ text: '/delete' }]], resize_keyboard: true } });
    } else {
        bot.sendMessage(chatId, '–í—ã –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –Ω–∏ –∫ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É —Å –ø–æ–º–æ—â—å—é /create –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ —Å –ø–æ–º–æ—â—å—é /join <room_id>. üåü', {
            reply_markup: { keyboard: [[{ text: '/create' }]], resize_keyboard: true },
        });
    }
});

bot.onText(/\/delete/, (msg) => {
    const chatId = msg.chat.id;
    const roomId = userRooms[chatId];
    if (rooms[roomId]) {
        const roomCreatorId = rooms[roomId][0].id;
        const roomName = `–ö–æ–º–Ω–∞—Ç–∞ —Å ID: ${roomId}`;
        if (roomCreatorId === chatId) {
            const roomParticipants = rooms[roomId].filter((participant) => participant.id !== chatId);
            delete rooms[roomId];
            delete userRooms[chatId];
            bot.sendMessage(chatId, '–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞. üóëÔ∏è', {
                reply_markup: { keyboard: [[{ text: '/create' }]], resize_keyboard: true },
            });
            roomParticipants.forEach((participant) => {
                bot.sendMessage(participant.id, `${roomName} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–º–Ω–∞—Ç—ã. üòî`);
            });
        } else {
            bot.sendMessage(chatId, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É, —Ç–∞–∫ –∫–∞–∫ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–µ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º. üòî', {
                reply_markup: { keyboard: [[{ text: '/create' }]], resize_keyboard: true },
            });
        }
    } else {
        bot.sendMessage(chatId, '–í—ã –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –Ω–∏ –∫ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É —Å –ø–æ–º–æ—â—å—é /create –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ —Å –ø–æ–º–æ—â—å—é /join <room_id>. üåü', {
            reply_markup: { keyboard: [[{ text: '/create' }]], resize_keyboard: true },
        });
    }
});

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const chatUsername = msg.from.username;
    let sent = false;
    for (const roomId in rooms) {
        if (rooms[roomId].some((participant) => participant.id === chatId)) {
            if (msg.text) {
                rooms[roomId].forEach((participant) => {
                    if (participant.id !== chatId) {
                        bot.sendMessage(participant.id, `@${chatUsername}: ${msg.text} üôÇ`);
                        sent = true;
                    }
                });
            } else if (msg.sticker) {
                const currentTime = Date.now();
                if (!lastStickerTime[chatId] || currentTime - lastStickerTime[chatId] >= 10000) {
                    const stickerId = msg.sticker.file_id;
                    rooms[roomId].forEach((participant) => {
                        if (participant.id !== chatId) {
                            bot.sendSticker(participant.id, stickerId);
                            sent = true;
                        }
                    });
                    lastStickerTime[chatId] = currentTime;
                } else {
                    bot.sendMessage(chatId, '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∏–∫–µ—Ä—ã —Ä–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥. üïí');
                }
            }
        }
    }
    if (!sent && !msg.text.startsWith('/create') && !msg.text.startsWith('/members') && !msg.text.startsWith('/join') && !msg.text.startsWith('/delete')) {
        if (!userRooms[chatId]) {
            bot.sendMessage(
                chatId,
                '–í—ã –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –Ω–∏ –∫ –æ–¥–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ. –°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–Ω–∞—Ç—É —Å –ø–æ–º–æ—â—å—é /create –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ —Å –ø–æ–º–æ—â—å—é /join <room_id>. üåü',
                { reply_markup: { keyboard: [[{ text: '/create' }]], resize_keyboard: true } }
            );
        }
    }
});
